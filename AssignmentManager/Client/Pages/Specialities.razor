@page "/specialities"
@using MudBlazor
@using AssignmentManager.Shared;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading.Tasks
@using AssignmentManager.Client.Extensions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using JsonSerializer = Newtonsoft.Json.JsonSerializer
@inject HttpClient Http

<MudText Typo="Typo.h2">Specialities</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudTextField @bind-Value="Search"
                      Label="Search"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      AdornmentColor="Color.Secondary"
                      DebounceInterval="250"
                      OnDebounceIntervalElapsed="()=>ParseQuery(Search)" />
    </MudItem>
    <MudItem xs="4">
        @if (SpecialityResources == null)
        {
            <MudAlert>@Error</MudAlert>
        }
        else
        {
            <MudPaper>
                <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                    <MudList Clickable="true">
                        @foreach (var speciality in SpecialityResources)
                        {
                            <MudListItem Text="@speciality.Code" Avatar="@Icons.Material.Filled.Apps" OnClick="() => { SelectSpeciality(speciality.Id); }"/>
                        }
                    </MudList>
                </div>
            </MudPaper>
        }
    </MudItem>
                @if (SelectedSpeciality != null)
    {
        <MudItem xs="8">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex">
                        <MudText Typo="Typo.h5">@SelectedSpeciality.Code</MudText>
                        <MudText Inline="true" Class="ml-auto">@SelectedSpeciality.StudyTypeDescription</MudText>
                    </div>
                    <MudDivider></MudDivider>

                    <MudText Typo="Typo.body1">groups: @SelectedSpeciality.Groups.Count</MudText>
                    <MudText Typo="Typo.body1">subjects: @SelectedSpeciality.Subjects.Count</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudExpansionPanels MultiExpansion="true" Style="width: 100%">
                    @if (SelectedSpeciality.Subjects != null)
                    {
                        <MudExpansionPanel>
                            <TitleContent>
                                <MudText Typo="Typo.h6">Subjects</MudText>
                            </TitleContent>
                            <ChildContent>
                                @if (SelectedSpeciality.Subjects.Count > 0)
                                {
                                    <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                                        <MudList Clickable="true">
                                            @foreach (var subject in SelectedSpeciality.Subjects)
                                            {
                                                var href = "subject/" + subject.SubjectId;
                                                <MudListItem Href="@href" Text="@subject.SubjectName" Avatar="@Icons.Material.Filled.Subject"/>
                                            }
                                        </MudList>
                                    </div>
                                }
                                else
                                {
                                    <MudAlert Severity="Severity.Info">This Speciality has no subjects</MudAlert>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                    @if (SelectedSpeciality.Groups != null)
                    {
                        <MudExpansionPanel>
                            <TitleContent>
                                <MudText Typo="Typo.h6">Groups</MudText>
                            </TitleContent>
                            <ChildContent>
                                @if (SelectedSpeciality.Subjects.Count > 0)
                                {
                                    <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                                        <MudList Clickable="false">
                                            @foreach (var group in SelectedSpeciality.Groups)
                                            {
                                                <MudListItem Text="@group.Name" Avatar="@Icons.Material.Filled.Subject"/>
                                            }
                                        </MudList>
                                    </div>
                                }
                                else
                                {
                                    <MudAlert Severity="Severity.Info">This Speciality has no groups</MudAlert>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                                        }
                    </MudExpansionPanels>
                </MudCardActions>
            </MudCard>
            @if (ShowSubjects && SelectedSpeciality.Subjects.Count != 0)
            {
                <MudPaper Class="mt-4">
                    <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                        <MudList Clickable="false">
                            <MudListSubheader>
                                <MudText Typo="Typo.h5">Subjects</MudText>
                            </MudListSubheader>
                            @foreach (var subject in SelectedSpeciality.Subjects)
                            {
                                <MudListItem Text="@subject.SubjectName" Avatar="@Icons.Material.Filled.Subject"/>
                            }
                        </MudList>
                    </div>
                </MudPaper>
            }
            @if (ShowGroups && SelectedSpeciality.Groups.Count != 0)
            {
                <MudPaper Class="mt-4">
                    <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                        <MudList Clickable="false">
                            <MudListSubheader>
                                <MudText Typo="Typo.h5">Groups</MudText>
                            </MudListSubheader>
                            @foreach (var group in SelectedSpeciality.Groups)
                            {
                                <MudListItem Text="@group.Name" Avatar="@Icons.Material.Filled.Subject"/>
                            }
                        </MudList>
                    </div>
                </MudPaper>
            }
        </MudItem>
    }
</MudGrid>

@code 
{
    string Search { get; set; }
    string Error { get; set; }
    bool ShowSubjects { get; set; } = false;
    bool ShowGroups { get; set; } = false;
    
    SpecialityResourceBriefly[] SpecialityResources { get; set; }
    SpecialityResource SelectedSpeciality { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            SpecialityResources = await Http.GetJson<SpecialityResourceBriefly[]>("api/specialities");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    async void ParseQuery(string query)
    {
        if (Search.Length >= 1)
        {
            int.TryParse(query, out var intQuery);
            var tmp = await Http.GetJson<SpecialityResourceBriefly[]>("api/specialities");
            var tmpList = new HashSet<SpecialityResourceBriefly>();
            foreach (var specialityResource in tmp)
            {
                if (specialityResource.Code.Contains(query) ||
                specialityResource.Id == intQuery)
                    tmpList.Add(specialityResource);
            }
            SpecialityResources = tmpList.ToArray();
        }
        else if (Search == "")
        {
            SpecialityResources = await Http.GetJson<SpecialityResourceBriefly[]>("api/specialities");
        }
        else
        {
            SpecialityResources = null;
            Error = "No Instructors found";
        }
        StateHasChanged();
    }

    void SelectSpeciality(int specialityId)
    {
        ShowSubjects = false;
        SelectedSpeciality = null;
        LoadSelected(specialityId);
    }

    async void LoadSelected(int id)
    {
        SelectedSpeciality = await Http.GetJson<SpecialityResource>($"api/specialities/{id}");
        StateHasChanged();
    }
}
